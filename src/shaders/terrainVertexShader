#version 330 core

// Inputs to the vertex shader
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

// Outputs of the vertex shader
out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;
	
// Uniform variables
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

const float density = 0.0035;
const float gradient = 5.0;

void main(void){

	

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	//Tells to OpenGL where to render this vertex on the screen	
	gl_Position = projectionMatrix * positionRelativeToCam;
	// Create an output color
	pass_textureCoords = textureCoords;
	
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow(distance*density,gradient));
	
	visibility = clamp(visibility, 0.0, 1.0);

}