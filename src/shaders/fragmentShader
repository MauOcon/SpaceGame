#version 330 core

// Inputs to the fragment shader
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

// Outputs of the fragment shader
out vec4 out_Color;

uniform sampler2D modelTexture;	// Represents the texture
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl,0.1);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = - unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	// How bright the specular light whitout damping
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	
	float dampedFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	vec4 textureColor = texture(modelTexture, pass_textureCoords);
	
	if(textureColor.a < 0.5){
		discard;
	}
		
	
	// Returns the color of the pixel on the texture at the coordinates 
	out_Color = vec4 (diffuse, 1.0) * textureColor + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0), out_Color, visibility);
	

}